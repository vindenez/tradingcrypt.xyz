"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addExportsToBarrel = exports.normalizeOptions = void 0;
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const ensure_typescript_1 = require("@nx/js/src/utils/typescript/ensure-typescript");
const artifact_name_and_directory_utils_1 = require("@nx/devkit/src/generators/artifact-name-and-directory-utils");
const ast_utils_1 = require("../../../utils/ast-utils");
let tsModule;
async function normalizeOptions(host, options) {
    const { artifactName: name, directory, fileName, filePath, project: projectName, } = await (0, artifact_name_and_directory_utils_1.determineArtifactNameAndDirectoryOptions)(host, {
        artifactType: 'component',
        callingGenerator: '@nx/vue:component',
        name: options.name,
        directory: options.directory,
        derivedDirectory: options.directory,
        flat: options.flat,
        nameAndDirectoryFormat: options.nameAndDirectoryFormat,
        project: options.project,
        fileExtension: 'vue',
        pascalCaseFile: options.pascalCaseFiles,
        pascalCaseDirectory: options.pascalCaseDirectory,
    });
    let { className } = (0, devkit_1.names)(fileName);
    const componentFileName = fileName;
    const project = (0, devkit_1.getProjects)(host).get(projectName);
    const { sourceRoot: projectSourceRoot, projectType } = project;
    if (options.export && projectType === 'application') {
        devkit_1.logger.warn(`The "--export" option should not be used with applications and will do nothing.`);
    }
    options.routing = options.routing ?? false;
    options.inSourceTests = options.inSourceTests ?? false;
    return {
        ...options,
        filePath,
        directory,
        className,
        fileName: componentFileName,
        projectSourceRoot,
        projectName,
    };
}
exports.normalizeOptions = normalizeOptions;
function addExportsToBarrel(host, options) {
    if (!tsModule) {
        tsModule = (0, ensure_typescript_1.ensureTypescript)();
    }
    const workspace = (0, devkit_1.getProjects)(host);
    const isApp = workspace.get(options.projectName).projectType === 'application';
    if (options.export && !isApp) {
        const indexFilePath = (0, devkit_1.joinPathFragments)(options.projectSourceRoot, options.js ? 'index.js' : 'index.ts');
        const indexSource = host.read(indexFilePath, 'utf-8');
        if (indexSource !== null) {
            const indexSourceFile = tsModule.createSourceFile(indexFilePath, indexSource, tsModule.ScriptTarget.Latest, true);
            const relativePathFromIndex = getRelativeImportToFile(indexFilePath, options.filePath);
            const changes = (0, devkit_1.applyChangesToString)(indexSource, (0, ast_utils_1.addImport)(indexSourceFile, `export { default as ${options.className} } from '${relativePathFromIndex}';`));
            host.write(indexFilePath, changes);
        }
    }
}
exports.addExportsToBarrel = addExportsToBarrel;
function getRelativeImportToFile(indexPath, filePath) {
    const { base, dir } = (0, path_1.parse)(filePath);
    const relativeDirToTarget = (0, path_1.relative)((0, path_1.dirname)(indexPath), dir);
    return `./${(0, devkit_1.joinPathFragments)(relativeDirToTarget, base)}`;
}
