"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToInferred = void 0;
const devkit_1 = require("@nx/devkit");
const plugin_1 = require("../../plugins/plugin");
const executor_to_plugin_migrator_1 = require("@nx/devkit/src/generators/plugin-migrations/executor-to-plugin-migrator");
async function convertToInferred(tree, options) {
    const projectGraph = await (0, devkit_1.createProjectGraphAsync)();
    const migratedProjects = await (0, executor_to_plugin_migrator_1.migrateExecutorToPlugin)(tree, projectGraph, '@nx/playwright:playwright', '@nx/playwright/plugin', (targetName) => ({ targetName, ciTargetName: 'e2e-ci' }), postTargetTransformer, plugin_1.createNodes, options.project);
    if (migratedProjects.size === 0) {
        throw new Error('Could not find any targets to migrate.');
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
}
exports.convertToInferred = convertToInferred;
function postTargetTransformer(target) {
    if (target.options) {
        if (target.options?.config) {
            delete target.options.config;
        }
        for (const [key, value] of Object.entries(target.options)) {
            const newKeyName = (0, devkit_1.names)(key).fileName;
            delete target.options[key];
            target.options[newKeyName] = value;
        }
    }
    return target;
}
exports.default = convertToInferred;
