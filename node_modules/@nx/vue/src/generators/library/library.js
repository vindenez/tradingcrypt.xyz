"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.libraryGeneratorInternal = exports.libraryGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const init_1 = require("../init/init");
const normalize_options_1 = require("./lib/normalize-options");
const add_linting_1 = require("../../utils/add-linting");
const create_library_files_1 = require("./lib/create-library-files");
const create_ts_config_1 = require("../../utils/create-ts-config");
const component_1 = require("../component/component");
const add_vite_1 = require("./lib/add-vite");
const ensure_dependencies_1 = require("../../utils/ensure-dependencies");
const log_show_project_command_1 = require("@nx/devkit/src/utils/log-show-project-command");
function libraryGenerator(tree, schema) {
    return libraryGeneratorInternal(tree, { addPlugin: false, ...schema });
}
exports.libraryGenerator = libraryGenerator;
async function libraryGeneratorInternal(tree, schema) {
    const tasks = [];
    const options = await (0, normalize_options_1.normalizeOptions)(tree, schema);
    if (options.publishable === true && !schema.importPath) {
        throw new Error(`For publishable libs you have to provide a proper "--importPath" which needs to be a valid npm package name (e.g. my-awesome-lib or @myorg/my-lib)`);
    }
    (0, devkit_1.addProjectConfiguration)(tree, options.name, {
        root: options.projectRoot,
        sourceRoot: (0, devkit_1.joinPathFragments)(options.projectRoot, 'src'),
        projectType: 'library',
        tags: options.parsedTags,
        targets: {},
    });
    tasks.push(await (0, js_1.initGenerator)(tree, { ...schema, skipFormat: true }));
    tasks.push(await (0, init_1.vueInitGenerator)(tree, {
        ...options,
        skipFormat: true,
    }));
    if (!options.skipPackageJson) {
        tasks.push((0, ensure_dependencies_1.ensureDependencies)(tree, options));
    }
    (0, create_ts_config_1.extractTsConfigBase)(tree);
    tasks.push(await (0, add_linting_1.addLinting)(tree, options, 'lib'));
    (0, create_library_files_1.createLibraryFiles)(tree, options);
    tasks.push(await (0, add_vite_1.addVite)(tree, options));
    if (options.component) {
        await (0, component_1.default)(tree, {
            name: options.name,
            project: options.name,
            flat: true,
            skipTests: options.unitTestRunner === 'none' ||
                (options.unitTestRunner === 'vitest' && options.inSourceTests == true),
            export: true,
            routing: options.routing,
            js: options.js,
            pascalCaseFiles: options.pascalCaseFiles,
            inSourceTests: options.inSourceTests,
            skipFormat: true,
        });
    }
    if (options.publishable || options.bundler !== 'none') {
        (0, devkit_1.updateJson)(tree, `${options.projectRoot}/package.json`, (json) => {
            json.name = options.importPath;
            return json;
        });
    }
    if (!options.skipTsConfig) {
        (0, js_1.addTsConfigPath)(tree, options.importPath, [
            (0, devkit_1.joinPathFragments)(options.projectRoot, './src', 'index.' + (options.js ? 'js' : 'ts')),
        ]);
    }
    if (options.js)
        (0, devkit_1.toJS)(tree);
    if (!options.skipFormat)
        await (0, devkit_1.formatFiles)(tree);
    tasks.push(() => {
        (0, log_show_project_command_1.logShowProjectCommand)(options.name);
    });
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.libraryGeneratorInternal = libraryGeneratorInternal;
exports.default = libraryGenerator;
