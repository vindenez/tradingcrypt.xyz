"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.editEslintConfigFiles = exports.addLinting = void 0;
const eslint_1 = require("@nx/eslint");
const path_1 = require("nx/src/utils/path");
const devkit_1 = require("@nx/devkit");
const lint_1 = require("./lint");
const eslint_file_1 = require("@nx/eslint/src/generators/utils/eslint-file");
async function addLinting(host, options, projectType) {
    if (options.linter === eslint_1.Linter.EsLint) {
        const lintTask = await (0, eslint_1.lintProjectGenerator)(host, {
            linter: options.linter,
            project: options.name,
            tsConfigPaths: [
                (0, path_1.joinPathFragments)(options.projectRoot, `tsconfig.${projectType}.json`),
            ],
            unitTestRunner: options.unitTestRunner,
            skipFormat: true,
            setParserOptionsProject: options.setParserOptionsProject,
            rootProject: options.rootProject,
            addPlugin: options.addPlugin,
        });
        if ((0, eslint_file_1.isEslintConfigSupported)(host)) {
            (0, eslint_file_1.addExtendsToLintConfig)(host, options.projectRoot, [
                'plugin:vue/vue3-essential',
                'eslint:recommended',
                '@vue/eslint-config-typescript',
                '@vue/eslint-config-prettier/skip-formatting',
            ]);
        }
        editEslintConfigFiles(host, options.projectRoot, options.rootProject);
        let installTask = () => { };
        if (!options.skipPackageJson) {
            installTask = (0, devkit_1.addDependenciesToPackageJson)(host, lint_1.extraEslintDependencies.dependencies, lint_1.extraEslintDependencies.devDependencies);
        }
        return (0, devkit_1.runTasksInSerial)(lintTask, installTask);
    }
    else {
        return () => { };
    }
}
exports.addLinting = addLinting;
function editEslintConfigFiles(tree, projectRoot, rootProject) {
    if (tree.exists((0, path_1.joinPathFragments)(projectRoot, 'eslint.config.js'))) {
        const fileName = (0, path_1.joinPathFragments)(projectRoot, 'eslint.config.js');
        (0, devkit_1.updateJson)(tree, fileName, (json) => {
            let updated = false;
            for (let override of json.overrides) {
                if (override.parserOptions) {
                    if (!override.files.includes('*.vue')) {
                        override.files.push('*.vue');
                    }
                    updated = true;
                }
            }
            if (!updated) {
                json.overrides = [
                    {
                        files: ['*.ts', '*.tsx', '*.js', '*.jsx', '*.vue'],
                        rules: { 'vue/multi-word-component-names': 'off' },
                    },
                ];
            }
            return json;
        });
    }
    else {
        const fileName = (0, path_1.joinPathFragments)(projectRoot, '.eslintrc.json');
        (0, devkit_1.updateJson)(tree, fileName, (json) => {
            let updated = false;
            for (let override of json.overrides) {
                if (override.parserOptions) {
                    if (!override.files.includes('*.vue')) {
                        override.files.push('*.vue');
                    }
                    updated = true;
                }
            }
            if (!updated) {
                json.overrides = [
                    {
                        files: ['*.ts', '*.tsx', '*.js', '*.jsx', '*.vue'],
                        rules: { 'vue/multi-word-component-names': 'off' },
                    },
                ];
            }
            return json;
        });
    }
    // Edit root config too
    if (tree.exists('.eslintrc.base.json')) {
        (0, devkit_1.updateJson)(tree, '.eslintrc.base.json', (json) => {
            for (let override of json.overrides) {
                if (override.rules &&
                    '@nx/enforce-module-boundaries' in override.rules) {
                    if (!override.files.includes('*.vue')) {
                        override.files.push('*.vue');
                    }
                }
            }
            return json;
        });
    }
    else if (tree.exists('.eslintrc.json') && !rootProject) {
        (0, devkit_1.updateJson)(tree, '.eslintrc.json', (json) => {
            for (let override of json.overrides) {
                if (override.rules &&
                    '@nx/enforce-module-boundaries' in override.rules) {
                    if (!override.files.includes('*.vue')) {
                        override.files.push('*.vue');
                    }
                }
            }
            return json;
        });
    }
}
exports.editEslintConfigFiles = editEslintConfigFiles;
