"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationGeneratorInternal = exports.applicationGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const eslint_1 = require("@nx/eslint");
const js_1 = require("@nx/js");
const normalize_options_1 = require("./lib/normalize-options");
const init_1 = require("../init/init");
const add_linting_1 = require("../../utils/add-linting");
const add_e2e_1 = require("./lib/add-e2e");
const create_application_files_1 = require("./lib/create-application-files");
const add_vite_1 = require("./lib/add-vite");
const create_ts_config_1 = require("../../utils/create-ts-config");
const ensure_dependencies_1 = require("../../utils/ensure-dependencies");
const log_show_project_command_1 = require("@nx/devkit/src/utils/log-show-project-command");
function applicationGenerator(tree, options) {
    return applicationGeneratorInternal(tree, { addPlugin: false, ...options });
}
exports.applicationGenerator = applicationGenerator;
async function applicationGeneratorInternal(tree, _options) {
    const options = await (0, normalize_options_1.normalizeOptions)(tree, _options);
    options.addPlugin ??= process.env.NX_ADD_PLUGINS !== 'false';
    const tasks = [];
    (0, devkit_1.addProjectConfiguration)(tree, options.name, {
        root: options.appProjectRoot,
        projectType: 'application',
        sourceRoot: `${options.appProjectRoot}/src`,
        targets: {},
    });
    tasks.push(await (0, js_1.initGenerator)(tree, {
        ...options,
        tsConfigName: options.rootProject
            ? 'tsconfig.json'
            : 'tsconfig.base.json',
        skipFormat: true,
    }));
    tasks.push(await (0, init_1.vueInitGenerator)(tree, {
        ...options,
        skipFormat: true,
    }));
    if (!options.skipPackageJson) {
        tasks.push((0, ensure_dependencies_1.ensureDependencies)(tree, options));
    }
    if (!options.rootProject) {
        (0, create_ts_config_1.extractTsConfigBase)(tree);
    }
    (0, create_application_files_1.createApplicationFiles)(tree, options);
    tasks.push(await (0, add_linting_1.addLinting)(tree, {
        name: options.projectName,
        projectRoot: options.appProjectRoot,
        linter: options.linter ?? eslint_1.Linter.EsLint,
        unitTestRunner: options.unitTestRunner,
        skipPackageJson: options.skipPackageJson,
        setParserOptionsProject: options.setParserOptionsProject,
        rootProject: options.rootProject,
        addPlugin: options.addPlugin,
    }, 'app'));
    tasks.push(await (0, add_vite_1.addVite)(tree, options));
    tasks.push(await (0, add_e2e_1.addE2e)(tree, options));
    if (options.js)
        (0, devkit_1.toJS)(tree);
    if (!options.skipFormat)
        await (0, devkit_1.formatFiles)(tree);
    tasks.push(() => {
        (0, log_show_project_command_1.logShowProjectCommand)(options.projectName);
    });
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.applicationGeneratorInternal = applicationGeneratorInternal;
exports.default = applicationGenerator;
