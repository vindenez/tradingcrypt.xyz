"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationGeneratorInternal = exports.configurationGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const versions_1 = require("@nx/js/src/utils/versions");
const child_process_1 = require("child_process");
const path = require("path");
const add_linter_1 = require("../../utils/add-linter");
const versions_2 = require("../../utils/versions");
const init_1 = require("../init/init");
function configurationGenerator(tree, options) {
    return configurationGeneratorInternal(tree, { addPlugin: false, ...options });
}
exports.configurationGenerator = configurationGenerator;
async function configurationGeneratorInternal(tree, options) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    options.addPlugin ??=
        process.env.NX_ADD_PLUGINS !== 'false' &&
            nxJson.useInferencePlugins !== false;
    const tasks = [];
    tasks.push(await (0, init_1.initGenerator)(tree, {
        skipFormat: true,
        skipPackageJson: options.skipPackageJson,
        addPlugin: options.addPlugin,
    }));
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const hasTsConfig = tree.exists((0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.json'));
    const offsetFromProjectRoot = (0, devkit_1.offsetFromRoot)(projectConfig.root);
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files'), projectConfig.root, {
        offsetFromRoot: offsetFromProjectRoot,
        projectRoot: projectConfig.root,
        webServerCommand: options.webServerCommand ?? null,
        webServerAddress: options.webServerAddress ?? null,
        ...options,
    });
    if (!hasTsConfig) {
        tree.write(`${projectConfig.root}/tsconfig.json`, JSON.stringify({
            extends: (0, js_1.getRelativePathToRootTsConfig)(tree, projectConfig.root),
            compilerOptions: {
                allowJs: true,
                outDir: `${offsetFromProjectRoot}dist/out-tsc`,
                module: 'commonjs',
                sourceMap: false,
            },
            include: [
                '**/*.ts',
                '**/*.js',
                'playwright.config.ts',
                'src/**/*.spec.ts',
                'src/**/*.spec.js',
                'src/**/*.test.ts',
                'src/**/*.test.js',
                'src/**/*.d.ts',
            ],
        }, null, 2));
    }
    const hasPlugin = (0, devkit_1.readNxJson)(tree).plugins?.some((p) => typeof p === 'string'
        ? p === '@nx/playwright/plugin'
        : p.plugin === '@nx/playwright/plugin');
    if (!hasPlugin) {
        addE2eTarget(tree, options);
        setupE2ETargetDefaults(tree);
    }
    tasks.push(await (0, add_linter_1.addLinterToPlaywrightProject)(tree, {
        project: options.project,
        linter: options.linter,
        skipPackageJson: options.skipPackageJson,
        js: options.js,
        directory: options.directory,
        setParserOptionsProject: options.setParserOptionsProject,
        rootProject: options.rootProject ?? projectConfig.root === '.',
        addPlugin: options.addPlugin,
    }));
    if (options.js) {
        const { ModuleKind } = (0, devkit_1.ensurePackage)('typescript', versions_1.typescriptVersion);
        (0, devkit_1.toJS)(tree, { extension: '.cjs', module: ModuleKind.CommonJS });
    }
    recommendVsCodeExtensions(tree);
    if (!options.skipPackageJson) {
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
            // required since used in playwright config
            '@nx/devkit': versions_2.nxVersion,
        }));
    }
    if (!options.skipInstall) {
        tasks.push(getBrowsersInstallTask());
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.configurationGeneratorInternal = configurationGeneratorInternal;
function getBrowsersInstallTask() {
    return () => {
        devkit_1.output.log({
            title: 'Ensuring Playwright is installed.',
            bodyLines: ['use --skipInstall to skip installation.'],
        });
        const pmc = (0, devkit_1.getPackageManagerCommand)();
        (0, child_process_1.execSync)(`${pmc.exec} playwright install`, { cwd: devkit_1.workspaceRoot });
    };
}
function recommendVsCodeExtensions(tree) {
    if (tree.exists('.vscode/extensions.json')) {
        (0, devkit_1.updateJson)(tree, '.vscode/extensions.json', (json) => {
            json.recommendations ??= [];
            const recs = new Set(json.recommendations);
            recs.add('ms-playwright.playwright');
            json.recommendations = Array.from(recs);
            return json;
        });
    }
    else {
        (0, devkit_1.writeJson)(tree, '.vscode/extensions.json', {
            recommendations: ['ms-playwright.playwright'],
        });
    }
}
function setupE2ETargetDefaults(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    if (!nxJson.namedInputs) {
        return;
    }
    // E2e targets depend on all their project's sources + production sources of dependencies
    nxJson.targetDefaults ??= {};
    const productionFileSet = !!nxJson.namedInputs?.production;
    nxJson.targetDefaults.e2e ??= {};
    nxJson.targetDefaults.e2e.cache ??= true;
    nxJson.targetDefaults.e2e.inputs ??= [
        'default',
        productionFileSet ? '^production' : '^default',
    ];
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function addE2eTarget(tree, options) {
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    if (projectConfig?.targets?.e2e) {
        throw new Error(`Project ${options.project} already has an e2e target.
Rename or remove the existing e2e target.`);
    }
    projectConfig.targets ??= {};
    projectConfig.targets.e2e = {
        executor: '@nx/playwright:playwright',
        outputs: [`{workspaceRoot}/dist/.playwright/${projectConfig.root}`],
        options: {
            config: `${projectConfig.root}/playwright.config.${options.js ? 'cjs' : 'ts'}`,
        },
    };
    (0, devkit_1.updateProjectConfiguration)(tree, options.project, projectConfig);
}
exports.default = configurationGenerator;
