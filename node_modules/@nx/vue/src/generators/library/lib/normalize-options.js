"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = void 0;
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
async function normalizeOptions(host, options) {
    const { projectName, names: projectNames, projectRoot, importPath, } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(host, {
        name: options.name,
        projectType: 'library',
        directory: options.directory,
        importPath: options.importPath,
        projectNameAndRootFormat: options.projectNameAndRootFormat,
        callingGenerator: '@nx/vue:library',
    });
    const fileName = projectNames.projectFileName;
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    let bundler = options.bundler ?? 'none';
    if (bundler === 'none') {
        if (options.publishable) {
            devkit_1.logger.warn(`Publishable libraries cannot be used with bundler: 'none'. Defaulting to 'vite'.`);
            bundler = 'vite';
        }
    }
    const normalized = {
        addPlugin: process.env.NX_ADD_PLUGINS !== 'false',
        ...options,
        bundler,
        fileName,
        routePath: `/${projectNames.projectFileName}`,
        name: projectName,
        projectRoot,
        parsedTags,
        importPath,
    };
    // Libraries with a bundler or is publishable must also be buildable.
    normalized.bundler =
        normalized.bundler !== 'none' || options.publishable ? 'vite' : 'none';
    normalized.inSourceTests === normalized.minimal || normalized.inSourceTests;
    if (options.appProject) {
        const appProjectConfig = (0, devkit_1.getProjects)(host).get(options.appProject);
        if (appProjectConfig.projectType !== 'application') {
            throw new Error(`appProject expected type of "application" but got "${appProjectConfig.projectType}"`);
        }
        try {
            normalized.appMain = appProjectConfig.targets.build.options.main;
            normalized.appSourceRoot = (0, devkit_1.normalizePath)(appProjectConfig.sourceRoot);
        }
        catch (e) {
            throw new Error(`Could not locate project main for ${options.appProject}`);
        }
    }
    return normalized;
}
exports.normalizeOptions = normalizeOptions;
